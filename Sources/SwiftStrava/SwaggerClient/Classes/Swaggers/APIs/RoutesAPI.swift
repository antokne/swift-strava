//
// RoutesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class RoutesAPI {
    /**
     Export Route GPX

     - parameter _id: (path) The identifier of the route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRouteAsGPX(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getRouteAsGPXWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Export Route GPX
     - GET /routes/{id}/export_gpx

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - parameter _id: (path) The identifier of the route. 

     - returns: RequestBuilder<Void> 
     */
    open class func getRouteAsGPXWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/routes/{id}/export_gpx"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Export Route TCX

     - parameter _id: (path) The identifier of the route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRouteAsTCX(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getRouteAsTCXWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Export Route TCX
     - GET /routes/{id}/export_tcx

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - parameter _id: (path) The identifier of the route. 

     - returns: RequestBuilder<Void> 
     */
    open class func getRouteAsTCXWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/routes/{id}/export_tcx"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Route

     - parameter _id: (path) The identifier of the route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRouteById(_id: Int64, completion: @escaping ((_ data: Route?,_ error: Error?) -> Void)) {
        getRouteByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Route
     - GET /routes/{id}

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example={
  "private" : true,
  "distance" : 0.8008282,
  "athlete" : "",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "elevation_gain" : 6.0274563,
  "type" : 5,
  "estimated_moving_time" : 7,
  "segments" : [ {
    "country" : "country",
    "private" : true,
    "distance" : 6.0274563,
    "average_grade" : 1.4658129,
    "maximum_grade" : 5.962134,
    "climb_category" : 9,
    "city" : "city",
    "elevation_high" : 5.637377,
    "athlete_pr_effort" : {
      "pr_elapsed_time" : 2,
      "pr_date" : "2000-01-23T04:56:07.000+00:00",
      "effort_count" : 4,
      "pr_activity_id" : 3
    },
    "athlete_segment_stats" : {
      "distance" : 1.4894159,
      "start_date_local" : "2000-01-23T04:56:07.000+00:00",
      "activity_id" : 1,
      "elapsed_time" : 1,
      "is_kom" : true,
      "id" : 7,
      "start_date" : "2000-01-23T04:56:07.000+00:00"
    },
    "start_latlng" : [ 7.0614014, 7.0614014 ],
    "elevation_low" : 2.302136,
    "activity_type" : "Ride",
    "name" : "name",
    "id" : 0,
    "state" : "state"
  }, {
    "country" : "country",
    "private" : true,
    "distance" : 6.0274563,
    "average_grade" : 1.4658129,
    "maximum_grade" : 5.962134,
    "climb_category" : 9,
    "city" : "city",
    "elevation_high" : 5.637377,
    "athlete_pr_effort" : {
      "pr_elapsed_time" : 2,
      "pr_date" : "2000-01-23T04:56:07.000+00:00",
      "effort_count" : 4,
      "pr_activity_id" : 3
    },
    "athlete_segment_stats" : {
      "distance" : 1.4894159,
      "start_date_local" : "2000-01-23T04:56:07.000+00:00",
      "activity_id" : 1,
      "elapsed_time" : 1,
      "is_kom" : true,
      "id" : 7,
      "start_date" : "2000-01-23T04:56:07.000+00:00"
    },
    "start_latlng" : [ 7.0614014, 7.0614014 ],
    "elevation_low" : 2.302136,
    "activity_type" : "Ride",
    "name" : "name",
    "id" : 0,
    "state" : "state"
  } ],
  "starred" : true,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "sub_type" : 2,
  "id_str" : "id_str",
  "name" : "name",
  "id" : 1,
  "map" : {
    "summary_polyline" : "summary_polyline",
    "id" : "id",
    "polyline" : "polyline"
  },
  "timestamp" : 5
}}]
     - parameter _id: (path) The identifier of the route. 

     - returns: RequestBuilder<Route> 
     */
    open class func getRouteByIdWithRequestBuilder(_id: Int64) -> RequestBuilder<Route> {
        var path = "/routes/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Route>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List Athlete Routes

     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRoutesByAthleteId(page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: [Route]?,_ error: Error?) -> Void)) {
        getRoutesByAthleteIdWithRequestBuilder(page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Athlete Routes
     - GET /athletes/{id}/routes

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ {
  "private" : true,
  "distance" : 0.8008282,
  "athlete" : "",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "elevation_gain" : 6.0274563,
  "type" : 5,
  "estimated_moving_time" : 7,
  "segments" : [ {
    "country" : "country",
    "private" : true,
    "distance" : 6.0274563,
    "average_grade" : 1.4658129,
    "maximum_grade" : 5.962134,
    "climb_category" : 9,
    "city" : "city",
    "elevation_high" : 5.637377,
    "athlete_pr_effort" : {
      "pr_elapsed_time" : 2,
      "pr_date" : "2000-01-23T04:56:07.000+00:00",
      "effort_count" : 4,
      "pr_activity_id" : 3
    },
    "athlete_segment_stats" : {
      "distance" : 1.4894159,
      "start_date_local" : "2000-01-23T04:56:07.000+00:00",
      "activity_id" : 1,
      "elapsed_time" : 1,
      "is_kom" : true,
      "id" : 7,
      "start_date" : "2000-01-23T04:56:07.000+00:00"
    },
    "start_latlng" : [ 7.0614014, 7.0614014 ],
    "elevation_low" : 2.302136,
    "activity_type" : "Ride",
    "name" : "name",
    "id" : 0,
    "state" : "state"
  }, {
    "country" : "country",
    "private" : true,
    "distance" : 6.0274563,
    "average_grade" : 1.4658129,
    "maximum_grade" : 5.962134,
    "climb_category" : 9,
    "city" : "city",
    "elevation_high" : 5.637377,
    "athlete_pr_effort" : {
      "pr_elapsed_time" : 2,
      "pr_date" : "2000-01-23T04:56:07.000+00:00",
      "effort_count" : 4,
      "pr_activity_id" : 3
    },
    "athlete_segment_stats" : {
      "distance" : 1.4894159,
      "start_date_local" : "2000-01-23T04:56:07.000+00:00",
      "activity_id" : 1,
      "elapsed_time" : 1,
      "is_kom" : true,
      "id" : 7,
      "start_date" : "2000-01-23T04:56:07.000+00:00"
    },
    "start_latlng" : [ 7.0614014, 7.0614014 ],
    "elevation_low" : 2.302136,
    "activity_type" : "Ride",
    "name" : "name",
    "id" : 0,
    "state" : "state"
  } ],
  "starred" : true,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "sub_type" : 2,
  "id_str" : "id_str",
  "name" : "name",
  "id" : 1,
  "map" : {
    "summary_polyline" : "summary_polyline",
    "id" : "id",
    "polyline" : "polyline"
  },
  "timestamp" : 5
}, {
  "private" : true,
  "distance" : 0.8008282,
  "athlete" : "",
  "description" : "description",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "elevation_gain" : 6.0274563,
  "type" : 5,
  "estimated_moving_time" : 7,
  "segments" : [ {
    "country" : "country",
    "private" : true,
    "distance" : 6.0274563,
    "average_grade" : 1.4658129,
    "maximum_grade" : 5.962134,
    "climb_category" : 9,
    "city" : "city",
    "elevation_high" : 5.637377,
    "athlete_pr_effort" : {
      "pr_elapsed_time" : 2,
      "pr_date" : "2000-01-23T04:56:07.000+00:00",
      "effort_count" : 4,
      "pr_activity_id" : 3
    },
    "athlete_segment_stats" : {
      "distance" : 1.4894159,
      "start_date_local" : "2000-01-23T04:56:07.000+00:00",
      "activity_id" : 1,
      "elapsed_time" : 1,
      "is_kom" : true,
      "id" : 7,
      "start_date" : "2000-01-23T04:56:07.000+00:00"
    },
    "start_latlng" : [ 7.0614014, 7.0614014 ],
    "elevation_low" : 2.302136,
    "activity_type" : "Ride",
    "name" : "name",
    "id" : 0,
    "state" : "state"
  }, {
    "country" : "country",
    "private" : true,
    "distance" : 6.0274563,
    "average_grade" : 1.4658129,
    "maximum_grade" : 5.962134,
    "climb_category" : 9,
    "city" : "city",
    "elevation_high" : 5.637377,
    "athlete_pr_effort" : {
      "pr_elapsed_time" : 2,
      "pr_date" : "2000-01-23T04:56:07.000+00:00",
      "effort_count" : 4,
      "pr_activity_id" : 3
    },
    "athlete_segment_stats" : {
      "distance" : 1.4894159,
      "start_date_local" : "2000-01-23T04:56:07.000+00:00",
      "activity_id" : 1,
      "elapsed_time" : 1,
      "is_kom" : true,
      "id" : 7,
      "start_date" : "2000-01-23T04:56:07.000+00:00"
    },
    "start_latlng" : [ 7.0614014, 7.0614014 ],
    "elevation_low" : 2.302136,
    "activity_type" : "Ride",
    "name" : "name",
    "id" : 0,
    "state" : "state"
  } ],
  "starred" : true,
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "sub_type" : 2,
  "id_str" : "id_str",
  "name" : "name",
  "id" : 1,
  "map" : {
    "summary_polyline" : "summary_polyline",
    "id" : "id",
    "polyline" : "polyline"
  },
  "timestamp" : 5
} ]}]
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)

     - returns: RequestBuilder<[Route]> 
     */
    open class func getRoutesByAthleteIdWithRequestBuilder(page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[Route]> {
        let path = "/athletes/{id}/routes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[Route]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
