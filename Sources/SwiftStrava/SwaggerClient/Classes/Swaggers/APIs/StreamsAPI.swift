//
// StreamsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class StreamsAPI {
    /**
     * enum for parameter keys
     */
    public enum Keys_getActivityStreams: String { 
        case time = "time"
        case distance = "distance"
        case latlng = "latlng"
        case altitude = "altitude"
        case velocitySmooth = "velocity_smooth"
        case heartrate = "heartrate"
        case cadence = "cadence"
        case watts = "watts"
        case temp = "temp"
        case moving = "moving"
        case gradeSmooth = "grade_smooth"
    }

    /**
     Get Activity Streams

     - parameter _id: (path) The identifier of the activity. 
     - parameter keys: (query) Desired stream types. 
     - parameter keyByType: (query) Must be true. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActivityStreams(_id: Int64, keys: [String], keyByType: Bool, completion: @escaping ((_ data: StreamSet?,_ error: Error?) -> Void)) {
        getActivityStreamsWithRequestBuilder(_id: _id, keys: keys, keyByType: keyByType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Activity Streams
     - GET /activities/{id}/streams

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example={
  "altitude" : "",
  "temp" : "",
  "velocity_smooth" : "",
  "watts" : "",
  "distance" : "",
  "heartrate" : "",
  "time" : "",
  "moving" : "",
  "latlng" : "",
  "cadence" : "",
  "grade_smooth" : ""
}}]
     - parameter _id: (path) The identifier of the activity. 
     - parameter keys: (query) Desired stream types. 
     - parameter keyByType: (query) Must be true. 

     - returns: RequestBuilder<StreamSet> 
     */
    open class func getActivityStreamsWithRequestBuilder(_id: Int64, keys: [String], keyByType: Bool) -> RequestBuilder<StreamSet> {
        var path = "/activities/{id}/streams"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "keys": keys, 
                        "key_by_type": keyByType
        ])


        let requestBuilder: RequestBuilder<StreamSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Route Streams

     - parameter _id: (path) The identifier of the route. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRouteStreams(_id: Int64, completion: @escaping ((_ data: StreamSet?,_ error: Error?) -> Void)) {
        getRouteStreamsWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Route Streams
     - GET /routes/{id}/streams

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example={
  "altitude" : "",
  "temp" : "",
  "velocity_smooth" : "",
  "watts" : "",
  "distance" : "",
  "heartrate" : "",
  "time" : "",
  "moving" : "",
  "latlng" : "",
  "cadence" : "",
  "grade_smooth" : ""
}}]
     - parameter _id: (path) The identifier of the route. 

     - returns: RequestBuilder<StreamSet> 
     */
    open class func getRouteStreamsWithRequestBuilder(_id: Int64) -> RequestBuilder<StreamSet> {
        var path = "/routes/{id}/streams"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<StreamSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter keys
     */
    public enum Keys_getSegmentEffortStreams: String { 
        case time = "time"
        case distance = "distance"
        case latlng = "latlng"
        case altitude = "altitude"
        case velocitySmooth = "velocity_smooth"
        case heartrate = "heartrate"
        case cadence = "cadence"
        case watts = "watts"
        case temp = "temp"
        case moving = "moving"
        case gradeSmooth = "grade_smooth"
    }

    /**
     Get Segment Effort Streams

     - parameter _id: (path) The identifier of the segment effort. 
     - parameter keys: (query) The types of streams to return. 
     - parameter keyByType: (query) Must be true. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSegmentEffortStreams(_id: Int64, keys: [String], keyByType: Bool, completion: @escaping ((_ data: StreamSet?,_ error: Error?) -> Void)) {
        getSegmentEffortStreamsWithRequestBuilder(_id: _id, keys: keys, keyByType: keyByType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Segment Effort Streams
     - GET /segment_efforts/{id}/streams

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example={
  "altitude" : "",
  "temp" : "",
  "velocity_smooth" : "",
  "watts" : "",
  "distance" : "",
  "heartrate" : "",
  "time" : "",
  "moving" : "",
  "latlng" : "",
  "cadence" : "",
  "grade_smooth" : ""
}}]
     - parameter _id: (path) The identifier of the segment effort. 
     - parameter keys: (query) The types of streams to return. 
     - parameter keyByType: (query) Must be true. 

     - returns: RequestBuilder<StreamSet> 
     */
    open class func getSegmentEffortStreamsWithRequestBuilder(_id: Int64, keys: [String], keyByType: Bool) -> RequestBuilder<StreamSet> {
        var path = "/segment_efforts/{id}/streams"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "keys": keys, 
                        "key_by_type": keyByType
        ])


        let requestBuilder: RequestBuilder<StreamSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter keys
     */
    public enum Keys_getSegmentStreams: String { 
        case distance = "distance"
        case latlng = "latlng"
        case altitude = "altitude"
    }

    /**
     Get Segment Streams

     - parameter _id: (path) The identifier of the segment. 
     - parameter keys: (query) The types of streams to return. 
     - parameter keyByType: (query) Must be true. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSegmentStreams(_id: Int64, keys: [String], keyByType: Bool, completion: @escaping ((_ data: StreamSet?,_ error: Error?) -> Void)) {
        getSegmentStreamsWithRequestBuilder(_id: _id, keys: keys, keyByType: keyByType).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Segment Streams
     - GET /segments/{id}/streams

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example={
  "altitude" : "",
  "temp" : "",
  "velocity_smooth" : "",
  "watts" : "",
  "distance" : "",
  "heartrate" : "",
  "time" : "",
  "moving" : "",
  "latlng" : "",
  "cadence" : "",
  "grade_smooth" : ""
}}]
     - parameter _id: (path) The identifier of the segment. 
     - parameter keys: (query) The types of streams to return. 
     - parameter keyByType: (query) Must be true. 

     - returns: RequestBuilder<StreamSet> 
     */
    open class func getSegmentStreamsWithRequestBuilder(_id: Int64, keys: [String], keyByType: Bool) -> RequestBuilder<StreamSet> {
        var path = "/segments/{id}/streams"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "keys": keys, 
                        "key_by_type": keyByType
        ])


        let requestBuilder: RequestBuilder<StreamSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
