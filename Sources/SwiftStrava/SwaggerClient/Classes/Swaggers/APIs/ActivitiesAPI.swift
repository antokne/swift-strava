//
// ActivitiesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ActivitiesAPI {
    /**
     Create an Activity

     - parameter name: (form)  
     - parameter type: (form)  
     - parameter sportType: (form)  
     - parameter startDateLocal: (form)  
     - parameter elapsedTime: (form)  
     - parameter _description: (form)  
     - parameter distance: (form)  
     - parameter trainer: (form)  
     - parameter commute: (form)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createActivity(name: String, type: String, sportType: String, startDateLocal: Date, elapsedTime: Int, _description: String, distance: Float, trainer: Int, commute: Int, completion: @escaping ((_ data: DetailedActivity?,_ error: Error?) -> Void)) {
        createActivityWithRequestBuilder(name: name, type: type, sportType: sportType, startDateLocal: startDateLocal, elapsedTime: elapsedTime, _description: _description, distance: distance, trainer: trainer, commute: commute).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an Activity
     - POST /activities

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=""}]
     - parameter name: (form)  
     - parameter type: (form)  
     - parameter sportType: (form)  
     - parameter startDateLocal: (form)  
     - parameter elapsedTime: (form)  
     - parameter _description: (form)  
     - parameter distance: (form)  
     - parameter trainer: (form)  
     - parameter commute: (form)  

     - returns: RequestBuilder<DetailedActivity> 
     */
    open class func createActivityWithRequestBuilder(name: String, type: String, sportType: String, startDateLocal: Date, elapsedTime: Int, _description: String, distance: Float, trainer: Int, commute: Int) -> RequestBuilder<DetailedActivity> {
        let path = "/activities"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "name": name,
                "type": type,
                "sport_type": sportType,
                "start_date_local": startDateLocal.encodeToJSON(),
                "elapsed_time": elapsedTime.encodeToJSON(),
                "description": _description,
                "distance": distance,
                "trainer": trainer.encodeToJSON(),
                "commute": commute.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DetailedActivity>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Activity

     - parameter _id: (path) The identifier of the activity. 
     - parameter includeAllEfforts: (query) To include all segments efforts. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getActivityById(_id: Int64, includeAllEfforts: Bool? = nil, completion: @escaping ((_ data: DetailedActivity?,_ error: Error?) -> Void)) {
        getActivityByIdWithRequestBuilder(_id: _id, includeAllEfforts: includeAllEfforts).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Activity
     - GET /activities/{id}

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path) The identifier of the activity. 
     - parameter includeAllEfforts: (query) To include all segments efforts. (optional)

     - returns: RequestBuilder<DetailedActivity> 
     */
    open class func getActivityByIdWithRequestBuilder(_id: Int64, includeAllEfforts: Bool? = nil) -> RequestBuilder<DetailedActivity> {
        var path = "/activities/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "include_all_efforts": includeAllEfforts
        ])


        let requestBuilder: RequestBuilder<DetailedActivity>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List Activity Comments

     - parameter _id: (path) The identifier of the activity. 
     - parameter page: (query) Deprecated. Prefer to use after_cursor. (optional)
     - parameter perPage: (query) Deprecated. Prefer to use page_size. (optional, default to 30)
     - parameter pageSize: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter afterCursor: (query) Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCommentsByActivityId(_id: Int64, page: Int? = nil, perPage: Int? = nil, pageSize: Int? = nil, afterCursor: String? = nil, completion: @escaping ((_ data: [Comment]?,_ error: Error?) -> Void)) {
        getCommentsByActivityIdWithRequestBuilder(_id: _id, page: page, perPage: perPage, pageSize: pageSize, afterCursor: afterCursor).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Activity Comments
     - GET /activities/{id}/comments

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ {
  "athlete" : "",
  "activity_id" : 6,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "text" : "text"
}, {
  "athlete" : "",
  "activity_id" : 6,
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "id" : 0,
  "text" : "text"
} ]}]
     - parameter _id: (path) The identifier of the activity. 
     - parameter page: (query) Deprecated. Prefer to use after_cursor. (optional)
     - parameter perPage: (query) Deprecated. Prefer to use page_size. (optional, default to 30)
     - parameter pageSize: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter afterCursor: (query) Cursor of the last item in the previous page of results, used to request the subsequent page of results.  When omitted, the first page of results is fetched. (optional)

     - returns: RequestBuilder<[Comment]> 
     */
    open class func getCommentsByActivityIdWithRequestBuilder(_id: Int64, page: Int? = nil, perPage: Int? = nil, pageSize: Int? = nil, afterCursor: String? = nil) -> RequestBuilder<[Comment]> {
        var path = "/activities/{id}/comments"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON(), 
                        "page_size": pageSize?.encodeToJSON(), 
                        "after_cursor": afterCursor
        ])


        let requestBuilder: RequestBuilder<[Comment]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List Activity Kudoers

     - parameter _id: (path) The identifier of the activity. 
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getKudoersByActivityId(_id: Int64, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: [SummaryAthlete]?,_ error: Error?) -> Void)) {
        getKudoersByActivityIdWithRequestBuilder(_id: _id, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Activity Kudoers
     - GET /activities/{id}/kudos

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter _id: (path) The identifier of the activity. 
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)

     - returns: RequestBuilder<[SummaryAthlete]> 
     */
    open class func getKudoersByActivityIdWithRequestBuilder(_id: Int64, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[SummaryAthlete]> {
        var path = "/activities/{id}/kudos"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[SummaryAthlete]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List Activity Laps

     - parameter _id: (path) The identifier of the activity. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLapsByActivityId(_id: Int64, completion: @escaping ((_ data: [Lap]?,_ error: Error?) -> Void)) {
        getLapsByActivityIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Activity Laps
     - GET /activities/{id}/laps

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ {
  "pace_zone" : 1,
  "average_cadence" : 5.962134,
  "activity" : {
    "id" : 6
  },
  "distance" : 2.302136,
  "athlete" : {
    "id" : 1
  },
  "start_date_local" : "2000-01-23T04:56:07.000+00:00",
  "end_index" : 3,
  "max_speed" : 4.145608,
  "lap_index" : 2,
  "total_elevation_gain" : 1.4894159,
  "split" : 1,
  "start_index" : 9,
  "elapsed_time" : 7,
  "name" : "name",
  "id" : 0,
  "average_speed" : 5.637377,
  "moving_time" : 7,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
}, {
  "pace_zone" : 1,
  "average_cadence" : 5.962134,
  "activity" : {
    "id" : 6
  },
  "distance" : 2.302136,
  "athlete" : {
    "id" : 1
  },
  "start_date_local" : "2000-01-23T04:56:07.000+00:00",
  "end_index" : 3,
  "max_speed" : 4.145608,
  "lap_index" : 2,
  "total_elevation_gain" : 1.4894159,
  "split" : 1,
  "start_index" : 9,
  "elapsed_time" : 7,
  "name" : "name",
  "id" : 0,
  "average_speed" : 5.637377,
  "moving_time" : 7,
  "start_date" : "2000-01-23T04:56:07.000+00:00"
} ]}]
     - parameter _id: (path) The identifier of the activity. 

     - returns: RequestBuilder<[Lap]> 
     */
    open class func getLapsByActivityIdWithRequestBuilder(_id: Int64) -> RequestBuilder<[Lap]> {
        var path = "/activities/{id}/laps"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[Lap]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List Athlete Activities

     - parameter before: (query) An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)
     - parameter after: (query) An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLoggedInAthleteActivities(before: Int? = nil, after: Int? = nil, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: [SummaryActivity]?,_ error: Error?) -> Void)) {
        getLoggedInAthleteActivitiesWithRequestBuilder(before: before, after: after, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Athlete Activities
     - GET /athlete/activities

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter before: (query) An epoch timestamp to use for filtering activities that have taken place before a certain time. (optional)
     - parameter after: (query) An epoch timestamp to use for filtering activities that have taken place after a certain time. (optional)
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)

     - returns: RequestBuilder<[SummaryActivity]> 
     */
    open class func getLoggedInAthleteActivitiesWithRequestBuilder(before: Int? = nil, after: Int? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[SummaryActivity]> {
        let path = "/athlete/activities"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "before": before?.encodeToJSON(), 
                        "after": after?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[SummaryActivity]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Activity Zones

     - parameter _id: (path) The identifier of the activity. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getZonesByActivityId(_id: Int64, completion: @escaping ((_ data: [ActivityZone]?,_ error: Error?) -> Void)) {
        getZonesByActivityIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Activity Zones
     - GET /activities/{id}/zones

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ {
  "score" : 0,
  "sensor_based" : true,
  "custom_zones" : true,
  "max" : 1,
  "distribution_buckets" : [ "", "" ],
  "type" : "heartrate",
  "points" : 6
}, {
  "score" : 0,
  "sensor_based" : true,
  "custom_zones" : true,
  "max" : 1,
  "distribution_buckets" : [ "", "" ],
  "type" : "heartrate",
  "points" : 6
} ]}]
     - parameter _id: (path) The identifier of the activity. 

     - returns: RequestBuilder<[ActivityZone]> 
     */
    open class func getZonesByActivityIdWithRequestBuilder(_id: Int64) -> RequestBuilder<[ActivityZone]> {
        var path = "/activities/{id}/zones"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[ActivityZone]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Update Activity

     - parameter _id: (path) The identifier of the activity. 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateActivityById(_id: Int64, body: UpdatableActivity? = nil, completion: @escaping ((_ data: DetailedActivity?,_ error: Error?) -> Void)) {
        updateActivityByIdWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Activity
     - PUT /activities/{id}

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path) The identifier of the activity. 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<DetailedActivity> 
     */
    open class func updateActivityByIdWithRequestBuilder(_id: Int64, body: UpdatableActivity? = nil) -> RequestBuilder<DetailedActivity> {
        var path = "/activities/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DetailedActivity>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
