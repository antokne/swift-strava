//
// ClubsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ClubsAPI {
    /**
     List Club Activities

     - parameter _id: (path) The identifier of the club. 
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClubActivitiesById(_id: Int64, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: [SummaryActivity]?,_ error: Error?) -> Void)) {
        getClubActivitiesByIdWithRequestBuilder(_id: _id, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Club Activities
     - GET /clubs/{id}/activities

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter _id: (path) The identifier of the club. 
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)

     - returns: RequestBuilder<[SummaryActivity]> 
     */
    open class func getClubActivitiesByIdWithRequestBuilder(_id: Int64, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[SummaryActivity]> {
        var path = "/clubs/{id}/activities"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[SummaryActivity]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List Club Administrators

     - parameter _id: (path) The identifier of the club. 
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClubAdminsById(_id: Int64, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: [SummaryAthlete]?,_ error: Error?) -> Void)) {
        getClubAdminsByIdWithRequestBuilder(_id: _id, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Club Administrators
     - GET /clubs/{id}/admins

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter _id: (path) The identifier of the club. 
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)

     - returns: RequestBuilder<[SummaryAthlete]> 
     */
    open class func getClubAdminsByIdWithRequestBuilder(_id: Int64, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[SummaryAthlete]> {
        var path = "/clubs/{id}/admins"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[SummaryAthlete]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Club

     - parameter _id: (path) The identifier of the club. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClubById(_id: Int64, completion: @escaping ((_ data: DetailedClub?,_ error: Error?) -> Void)) {
        getClubByIdWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Club
     - GET /clubs/{id}

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path) The identifier of the club. 

     - returns: RequestBuilder<DetailedClub> 
     */
    open class func getClubByIdWithRequestBuilder(_id: Int64) -> RequestBuilder<DetailedClub> {
        var path = "/clubs/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DetailedClub>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List Club Members

     - parameter _id: (path) The identifier of the club. 
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClubMembersById(_id: Int64, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: [SummaryAthlete]?,_ error: Error?) -> Void)) {
        getClubMembersByIdWithRequestBuilder(_id: _id, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Club Members
     - GET /clubs/{id}/members

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter _id: (path) The identifier of the club. 
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)

     - returns: RequestBuilder<[SummaryAthlete]> 
     */
    open class func getClubMembersByIdWithRequestBuilder(_id: Int64, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[SummaryAthlete]> {
        var path = "/clubs/{id}/members"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[SummaryAthlete]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     List Athlete Clubs

     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLoggedInAthleteClubs(page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: [SummaryClub]?,_ error: Error?) -> Void)) {
        getLoggedInAthleteClubsWithRequestBuilder(page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List Athlete Clubs
     - GET /athlete/clubs

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - parameter page: (query) Page number. Defaults to 1. (optional)
     - parameter perPage: (query) Number of items per page. Defaults to 30. (optional, default to 30)

     - returns: RequestBuilder<[SummaryClub]> 
     */
    open class func getLoggedInAthleteClubsWithRequestBuilder(page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[SummaryClub]> {
        let path = "/athlete/clubs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<[SummaryClub]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
