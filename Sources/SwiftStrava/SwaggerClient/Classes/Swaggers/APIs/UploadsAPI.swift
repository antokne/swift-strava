//
// UploadsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UploadsAPI {
    /**
     * enum for parameter dataType
     */
    public enum DataType_createUpload: String { 
        case fit = "fit"
        case fitGz = "fit.gz"
        case tcx = "tcx"
        case tcxGz = "tcx.gz"
        case gpx = "gpx"
        case gpxGz = "gpx.gz"
    }

    /**
     Upload Activity

     - parameter file: (form)  (optional)
     - parameter name: (form)  (optional)
     - parameter _description: (form)  (optional)
     - parameter trainer: (form)  (optional)
     - parameter commute: (form)  (optional)
     - parameter dataType: (form)  (optional)
     - parameter externalId: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUpload(file: Data? = nil, name: String? = nil, _description: String? = nil, trainer: String? = nil, commute: String? = nil, dataType: DataType_createUpload? = nil, externalId: String? = nil, completion: @escaping ((_ data: Upload?,_ error: Error?) -> Void)) {
        createUploadWithRequestBuilder(file: file, name: name, _description: _description, trainer: trainer, commute: commute, dataType: dataType, externalId: externalId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Upload Activity
     - POST /uploads

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example={
  "id_str" : "id_str",
  "activity_id" : 6,
  "external_id" : "external_id",
  "id" : 0,
  "error" : "error",
  "status" : "status"
}}]
     - parameter file: (form)  (optional)
     - parameter name: (form)  (optional)
     - parameter _description: (form)  (optional)
     - parameter trainer: (form)  (optional)
     - parameter commute: (form)  (optional)
     - parameter dataType: (form)  (optional)
     - parameter externalId: (form)  (optional)

     - returns: RequestBuilder<Upload> 
     */
    open class func createUploadWithRequestBuilder(file: Data? = nil, name: String? = nil, _description: String? = nil, trainer: String? = nil, commute: String? = nil, dataType: DataType_createUpload? = nil, externalId: String? = nil) -> RequestBuilder<Upload> {
        let path = "/uploads"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                "file": file,
                "name": name,
                "description": _description,
                "trainer": trainer,
                "commute": commute,
                "data_type": dataType?.rawValue,
                "external_id": externalId
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Upload>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get Upload

     - parameter uploadId: (path) The identifier of the upload. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUploadById(uploadId: Int64, completion: @escaping ((_ data: Upload?,_ error: Error?) -> Void)) {
        getUploadByIdWithRequestBuilder(uploadId: uploadId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Upload
     - GET /uploads/{uploadId}

     - OAuth:
       - type: oauth2
       - name: strava_oauth
     - examples: [{contentType=application/json, example={
  "id_str" : "id_str",
  "activity_id" : 6,
  "external_id" : "external_id",
  "id" : 0,
  "error" : "error",
  "status" : "status"
}}]
     - parameter uploadId: (path) The identifier of the upload. 

     - returns: RequestBuilder<Upload> 
     */
    open class func getUploadByIdWithRequestBuilder(uploadId: Int64) -> RequestBuilder<Upload> {
        var path = "/uploads/{uploadId}"
        let uploadIdPreEscape = "\(uploadId)"
        let uploadIdPostEscape = uploadIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uploadId}", with: uploadIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Upload>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
