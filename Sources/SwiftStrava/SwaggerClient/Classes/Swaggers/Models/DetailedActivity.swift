//
// DetailedActivity.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct DetailedActivity: Codable {

	/** The unique identifier of the activity */
	public var _id: Int64?
	/** The identifier provided at upload time */
	public var externalId: String?
	/** The identifier of the upload that resulted in this activity */
	public var uploadId: Int64?
	public var athlete: MetaAthlete?
	/** The name of the activity */
	public var name: String?
	/** The activity&#x27;s distance, in meters */
	public var distance: Float?
	/** The activity&#x27;s moving time, in seconds */
	public var movingTime: Int?
	/** The activity&#x27;s elapsed time, in seconds */
	public var elapsedTime: Int?
	/** The activity&#x27;s total elevation gain. */
	public var totalElevationGain: Float?
	/** The activity&#x27;s highest elevation, in meters */
	public var elevHigh: Float?
	/** The activity&#x27;s lowest elevation, in meters */
	public var elevLow: Float?
	public var type: ActivityType?
	public var sportType: SportType?
	/** The time at which the activity was started. */
	public var startDate: Date?
	/** The time at which the activity was started in the local timezone. */
	public var startDateLocal: Date?
	/** The timezone of the activity */
	public var timezone: String?
	public var startLatlng: LatLng?
	public var endLatlng: LatLng?
	/** The number of achievements gained during this activity */
	public var achievementCount: Int?
	/** The number of kudos given for this activity */
	public var kudosCount: Int?
	/** The number of comments for this activity */
	public var commentCount: Int?
	/** The number of athletes for taking part in a group activity */
	public var athleteCount: Int?
	/** The number of Instagram photos for this activity */
	public var photoCount: Int?
	/** The number of Instagram and Strava photos for this activity */
	public var totalPhotoCount: Int?
	public var map: PolylineMap?
	/** Whether this activity was recorded on a training machine */
	public var trainer: Bool?
	/** Whether this activity is a commute */
	public var commute: Bool?
	/** Whether this activity was created manually */
	public var manual: Bool?
	/** Whether this activity is private */
	public var _private: Bool?
	/** Whether this activity is flagged */
	public var flagged: Bool?
	/** The activity&#x27;s workout type */
	public var workoutType: Int?
	/** The unique identifier of the upload in string format */
	public var uploadIdStr: String?
	/** The activity&#x27;s average speed, in meters per second */
	public var averageSpeed: Float?
	/** The activity&#x27;s max speed, in meters per second */
	public var maxSpeed: Float?
	/** Whether the logged-in athlete has kudoed this activity */
	public var hasKudoed: Bool?
	/** Whether the activity is muted */
	public var hideFromHome: Bool?
	/** The id of the gear for the activity */
	public var gearId: String?
	/** The total work done in kilojoules during this activity. Rides only */
	public var kilojoules: Float?
	/** Average power output in watts during this activity. Rides only */
	public var averageWatts: Float?
	/** Whether the watts are from a power meter, false if estimated */
	public var deviceWatts: Bool?
	/** Rides with power meter data only */
	public var maxWatts: Int?
	/** Similar to Normalized Power. Rides with power meter data only */
	public var weightedAverageWatts: Int?
	
    /** The description of the activity */
    public var _description: String?
    public var photos: PhotosSummary?
    public var gear: SummaryGear?
    /** The number of kilocalories consumed during this activity */
    public var calories: Float?
    public var segmentEfforts: [DetailedSegmentEffort]?
    /** The name of the device used to record the activity */
    public var deviceName: String?
    /** The token used to embed a Strava activity */
    public var embedToken: String?
    /** The splits of this activity in metric units (for runs) */
    public var splitsMetric: [Split]?
    /** The splits of this activity in imperial units (for runs) */
    public var splitsStandard: [Split]?
    public var laps: [Lap]?
    public var bestEfforts: [DetailedSegmentEffort]?

    public init(_id: Int64? = nil, externalId: String? = nil, uploadId: Int64? = nil, athlete: MetaAthlete? = nil, name: String? = nil, distance: Float? = nil, movingTime: Int? = nil, elapsedTime: Int? = nil, totalElevationGain: Float? = nil, elevHigh: Float? = nil, elevLow: Float? = nil, type: ActivityType? = nil, sportType: SportType? = nil, startDate: Date? = nil, startDateLocal: Date? = nil, timezone: String? = nil, startLatlng: LatLng? = nil, endLatlng: LatLng? = nil, achievementCount: Int? = nil, kudosCount: Int? = nil, commentCount: Int? = nil, athleteCount: Int? = nil, photoCount: Int? = nil, totalPhotoCount: Int? = nil, map: PolylineMap? = nil, trainer: Bool? = nil, commute: Bool? = nil, manual: Bool? = nil, _private: Bool? = nil, flagged: Bool? = nil, workoutType: Int? = nil, uploadIdStr: String? = nil, averageSpeed: Float? = nil, maxSpeed: Float? = nil, hasKudoed: Bool? = nil, hideFromHome: Bool? = nil, gearId: String? = nil, kilojoules: Float? = nil, averageWatts: Float? = nil, deviceWatts: Bool? = nil, maxWatts: Int? = nil, weightedAverageWatts: Int? = nil, _description: String? = nil, photos: PhotosSummary? = nil, gear: SummaryGear? = nil, calories: Float? = nil, segmentEfforts: [DetailedSegmentEffort]? = nil, deviceName: String? = nil, embedToken: String? = nil, splitsMetric: [Split]? = nil, splitsStandard: [Split]? = nil, laps: [Lap]? = nil, bestEfforts: [DetailedSegmentEffort]? = nil) {
		
		self._id = _id
		self.externalId = externalId
		self.uploadId = uploadId
		self.athlete = athlete
		self.name = name
		self.distance = distance
		self.movingTime = movingTime
		self.elapsedTime = elapsedTime
		self.totalElevationGain = totalElevationGain
		self.elevHigh = elevHigh
		self.elevLow = elevLow
		self.type = type
		self.sportType = sportType
		self.startDate = startDate
		self.startDateLocal = startDateLocal
		self.timezone = timezone
		self.startLatlng = startLatlng
		self.endLatlng = endLatlng
		self.achievementCount = achievementCount
		self.kudosCount = kudosCount
		self.commentCount = commentCount
		self.athleteCount = athleteCount
		self.photoCount = photoCount
		self.totalPhotoCount = totalPhotoCount
		self.map = map
		self.trainer = trainer
		self.commute = commute
		self.manual = manual
		self._private = _private
		self.flagged = flagged
		self.workoutType = workoutType
		self.uploadIdStr = uploadIdStr
		self.averageSpeed = averageSpeed
		self.maxSpeed = maxSpeed
		self.hasKudoed = hasKudoed
		self.hideFromHome = hideFromHome
		self.gearId = gearId
		self.kilojoules = kilojoules
		self.averageWatts = averageWatts
		self.deviceWatts = deviceWatts
		self.maxWatts = maxWatts
		self.weightedAverageWatts = weightedAverageWatts
		
        self._description = _description
        self.photos = photos
        self.gear = gear
        self.calories = calories
        self.segmentEfforts = segmentEfforts
        self.deviceName = deviceName
        self.embedToken = embedToken
        self.splitsMetric = splitsMetric
        self.splitsStandard = splitsStandard
        self.laps = laps
        self.bestEfforts = bestEfforts
    }

    public enum CodingKeys: String, CodingKey {
		
		case _id = "id"
		case externalId = "external_id"
		case uploadId = "upload_id"
		case athlete
		case name
		case distance
		case movingTime = "moving_time"
		case elapsedTime = "elapsed_time"
		case totalElevationGain = "total_elevation_gain"
		case elevHigh = "elev_high"
		case elevLow = "elev_low"
		case type
		case sportType = "sport_type"
		case startDate = "start_date"
		case startDateLocal = "start_date_local"
		case timezone
		case startLatlng = "start_latlng"
		case endLatlng = "end_latlng"
		case achievementCount = "achievement_count"
		case kudosCount = "kudos_count"
		case commentCount = "comment_count"
		case athleteCount = "athlete_count"
		case photoCount = "photo_count"
		case totalPhotoCount = "total_photo_count"
		case map
		case trainer
		case commute
		case manual
		case _private = "private"
		case flagged
		case workoutType = "workout_type"
		case uploadIdStr = "upload_id_str"
		case averageSpeed = "average_speed"
		case maxSpeed = "max_speed"
		case hasKudoed = "has_kudoed"
		case hideFromHome = "hide_from_home"
		case gearId = "gear_id"
		case kilojoules
		case averageWatts = "average_watts"
		case deviceWatts = "device_watts"
		case maxWatts = "max_watts"
		case weightedAverageWatts = "weighted_average_watts"
		
        case _description = "description"
        case photos
        case gear
        case calories
        case segmentEfforts = "segment_efforts"
        case deviceName = "device_name"
        case embedToken = "embed_token"
        case splitsMetric = "splits_metric"
        case splitsStandard = "splits_standard"
        case laps
        case bestEfforts = "best_efforts"
    }

}
